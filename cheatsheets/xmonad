xmonad =|= workspaces =|= Super_L+[n]                    =|= Go to workspace [n]                          =|= xdotool


-----------------------------------------------------------------------
-- System / Utilities
-----------------------------------------------------------------------
xmonad =|= System =|= Super_L+q                        =|= Restart XMonad                           =|= xdotool
xmonad =|= System =|= Super_L+ctrl+q                   =|= Rebuild & restart XMonad                 =|= xdotool
xmonad =|= System =|= Super_L+shift+q                  =|= Quit XMonad                              =|= xdotool
xmonad =|= System =|= Super_L+x                        =|= Lock screen                              =|= xdotool

--    subKeys "Media"
--    [ ("XF86AudioMute"          , addName "Restart XMonad"                 $ spawn "amixer -q set Master toggle")
----        "XF86AudioMicMute       , addName "Restart XMonad"                 $ spawn  "amixer -q set Capture toggle")
----   -- XF86AudioLowerVolume
--    , ("M1-]"        , addName "Restart XMonad"                    $ spawn "amixer -q set Master 1%-")
----   -- XF86AudioRaiseVolume
----     , ((0, 0x1008ff13)        , addName "Restart XMonad"                    $ spawn  "amixer -q set Master 1%+")
---- --XF86XK_MonBrightnessDown
--    , ("M1--"                   , addName "Restart XMonad"                   $ spawn "/usr/bin/xbacklight -dec 5  & notify-send  $(/usr/bin/xbacklight -get)  \"Bright Up $()/usr/bin/xbacklight -get)\" ")
----   --XF86XK_MonBrightnessUp
--    , ("M1-="                   , addName "Restart XMonad"                   $ spawn  "/usr/bin/xbacklight -inc 5 & notify-send  $(/usr/bin/xbacklight -get) \"Bright Down $()/usr/bin/xbacklight -get)\" ")
--
--     ] ^++^

-----------------------------------------------------------------------
-- Actionsff
-----------------------------------------------------------------------
subKeys "Actions"
[ ("M-a"                    , addName "Notify w current X selection"    $ unsafeWithSelection "notify-send")
, ("M-<F7>"                    , addName "TESTING"                         $ runInTerm "-role glances" "glances" )
, ("M-u"                    , addName "Copy current browser URL"        $ spawn "with-url copy")
, ("M-o"                    , addName "Display (output) launcher"       $ spawn "displayctl menu")
, ("<XF86XK_MonBrightnessUp>"        , addName "Display - force internal"        $ spawn "/usr/bin/xbacklight -inc 5  & notify-send  \"Bright Up\"")
, ("<xF86XK_MonBrightnessDown>"        , addName "Display - force internal"        $ spawn "/usr/bin/xbacklight -dec 5")
, ("M-<XF86Display>"        , addName "Display - force internal"        $ spawn "displayctl internal")
, ("S-<XF86Display>"        , addName "Display - force internal"        $ spawn "displayctl internal")
, ("M-i"                    , addName "Network (Interface) launcher"    $ spawn "wicd-gtk")
, ("M-/"                    , addName "On-screen keys"                  $ spawn "killall screenkey &>/dev/null || screenkey --no-systray")
, ("M-S-/"                  , addName "On-screen keys settings"         $ spawn "screenkey --show-settings")
, ("M1-p"                   , addName "Capture screen"                  $ spawn "screenshot" )
, ("M1-S-p"                 , addName "Capture screen - area select"    $ spawn "screenshot area" )
, ("M1-r"                   , addName "Record screen"                   $ spawn "screencast" )
, ("M1-S-r"                 , addName "Record screen - area select"     $ spawn "screencast area" )
] ^++^

-----------------------------------------------------------------------
-- Launchers
-----------------------------------------------------------------------
subKeys "Launchers"
[ ("M-<Space>"              , addName "Launcher"                        $ spawn myLauncher)
, ("M-w"                    , addName "Rofi Lpass"                        $ spawn "rofictl window")
, ("M-l"                    , addName "Rofi Lpass"                        $ spawn "rofictl-lpass")
, ("M-<Return>"             , addName "Terminal"                        $ spawn myTerminal)
, ("M-c"                    , addName "Browser"                         $ spawn myBrowserQute)
, ("M-t"                    , addName "File Manager"                    $ spawn myFileManager)
, ("M-\\"                    , addName "NSP Chat"                       $ bindOn WS [(wsWRK1, namedScratchpadAction scratchpads "hangoutsWork"),
                                                                          ("", namedScratchpadAction scratchpads "hangoutsPersonal")])
-- , ("M-t"                    , addName "NSP Tasks"                       $ bindOn WS [(wsWRK1, namedScratchpadAction scratchpads "trelloWork"),
--                                                                           ("", namedScratchpadAction scratchpachromeds "trello")])
, ("M-m"                    , addName "NSP Music"                       $ namedScratchpadAction scratchpads "googleMusic")
, ("M-<F12>"                , addName "NSP Music"                       $ namedScratchpadAction scratchpads "spotify")
, ("M-<F2>"                 , addName "Terminal"                        $ namedScratchpadAction scratchpads "terminal")
, ("M-<F3>"                 , addName "Htop"                            $ namedScratchpadAction scratchpads "htop")
, ("M-<F8>"                 , addName "Wicd"                            $ namedScratchpadAction scratchpads "wicd-curses")
, ("M-<F4>"                 , addName "Pavucontrol"                     $ namedScratchpadAction scratchpads "pavucontrol")
, ("M-v"                    , addName "NSP Video"                       $ namedScratchpadAction scratchpads "plex")
, ("M1-x"                   , addName "NSP Xawtv"                       $ namedScratchpadAction scratchpads "xawtv")
, ("M-n"                    , addName "NSP Console"                     $ namedScratchpadAction scratchpads "console")
, ("M-s s"                  , addName "Cancel submap"                   $ return ())
, ("M-s M-s"                , addName "Cancel submap"                   $ return ())
] ^++^

-----------------------------------------------------------------------
-- Windows
-----------------------------------------------------------------------

subKeys "Windows"
(
[ ("M-<Backspace>"          , addName "Kill"                            kill1)
, ("M-S-<Backspace>"        , addName "Kill all"                        $ confirmPrompt hotPromptTheme "kill all" $ killAll)
, ("M-d"                    , addName "Duplicate w to all ws"           $ windows copyToAll)
, ("M-S-d"                  , addName "Kill other duplicates"           $ killAllOtherCopies)
--, ("M-d"                    , addName "Duplicate w to all ws"           $ toggleCopyToAll)
, ("M-p"                    , addName "Hide window to stack"            $ withFocused hideWindow)
, ("M-S-p"                  , addName "Restore hidden window (FIFO)"    $ popOldestHiddenWindow)

, ("M-b"                    , addName "Promote"                         $ promote)

, ("M-g"                    , addName "Un-merge from sublayout"         $ withFocused (sendMessage . UnMerge))
, ("M-S-g"                  , addName "Merge all into sublayout"        $ withFocused (sendMessage . MergeAll))

, ("M-z u"                  , addName "Focus urgent"                    focusUrgent)
, ("M-z m"                  , addName "Focus master"                    $ windows W.focusMaster)

--, ("M-<Tab>"              	, addName "Focus down"                      $ windows W.focusDown)
--, ("M-S-<Tab>"              , addName "Focus up"                        $ windows W.focusUp)

, ("M-'"                    , addName "Navigate tabs D"                 $ bindOn LD [("Tabs", windows W.focusDown), ("", onGroup W.focusDown')])
, ("M-;"                    , addName "Navigate tabs U"                 $ bindOn LD [("Tabs", windows W.focusUp), ("", onGroup W.focusUp')])
, ("C-'"                    , addName "Swap tab D"                      $ windows W.swapDown)
, ("C-;"                    , addName "Swap tab U"                      $ windows W.swapUp)

-- ComboP specific (can remove after demo)
, ("M-C-S-m"                , addName "Combo swap"                      $ sendMessage $ SwapWindow)
]

++ zipM' "M1-"               "Navigate window"                           arrowKeys dirs windowGo True
-- ++ zipM' "M-S-"               "Move window"                               dirKeys dirs windowSwap True
-- TODO: following may necessitate use of a "passthrough" binding that can send C- values to focused w
++ zipM' "M1-C-"               "Move window"                               dirKeys dirs windowSwap True
++ zipM  "M-C-"             "Merge w/sublayout"                         dirKeys dirs (sendMessage . pullGroup)
++ zipM' "M-"               "Navigate screen"                           arrowKeys dirs screenGo True
-- ++ zipM' "M-S-"             "Move window to screen"                     arrowKeys dirs windowToScreen True
++ zipM' "M-C-"             "Move window to screen"                     arrowKeys dirs windowToScreen True
++ zipM' "M-S-"             "Swap workspace to screen"                  arrowKeys dirs screenSwap True

) ^++^

-----------------------------------------------------------------------
-- Workspaces & Projects
-----------------------------------------------------------------------

-- original version was for dynamic workspaces
--    subKeys "{a,o,e,u,i,d,...} focus and move window between workspaces"
--    (  zipMod "View      ws" wsKeys [0..] "M-"      (withNthWorkspace W.greedyView)

subKeys "Workspaces & Projects"
(
[ ("M-ws"                    , addName "Switch to Project"           $ switchProjectPrompt warmPromptTheme)
, ("M-S-w"                  , addName "Shift to Project"            $ shiftToProjectPrompt warmPromptTheme)
, ("M-<Escape>"             , addName "Next non-empty workspace"    $ nextNonEmptyWS)
, ("M-S-<Escape>"           , addName "Prev non-empty workspace"    $ prevNonEmptyWS)
, ("M-`"                    , addName "Next non-empty workspace"    $ nextNonEmptyWS)
, ("M-S-`"                  , addName "Prev non-empty workspace"    $ prevNonEmptyWS)
, ("M-a"                    , addName "Toggle last workspace"       $ toggleWS' ["NSP"])
]
++ zipM "M-"                "View      ws"                          wsKeys [0..] (withNthWorkspace W.greedyView)
-- ++ zipM "M-S-"              "Move w to ws"                          wsKeys [0..] (withNthWorkspace W.shift)
-- TODO: following may necessitate use of a "passthrough" binding that can send C- values to focused w
++ zipM "C-"                "Move w to ws"                          wsKeys [0..] (withNthWorkspace W.shift)
-- TODO: make following a submap
++ zipM "M-S-C-"            "Copy w to ws"                          wsKeys [0..] (withNthWorkspace copy)
) ^++^

-- TODO: consider a submap for nav/move to specific workspaces based on first initial

-----------------------------------------------------------------------
-- Layouts & Sublayouts
-----------------------------------------------------------------------

subKeys "Layout Management"

[ ("M-<Tab>"                , addName "Cycle all layouts"               $ sendMessage NextLayout)
, ("M-C-<Tab>"              , addName "Cycle sublayout"                 $ toSubl NextLayout)
, ("M-S-<Tab>"              , addName "Reset layout"                    $ setLayout $ XMonad.layoutHook conf)

, ("M-y"                    , addName "Float tiled w"                   $ withFocused toggleFloat)
, ("M-S-y"                  , addName "Tile all floating w"             $ sinkAll)

, ("M-,"                    , addName "Decrease master windows"         $ sendMessage (IncMasterN (-1)))
, ("M-."                    , addName "Increase master windows"         $ sendMessage (IncMasterN 1))

, ("M-r"                    , addName "Reflect/Rotate"              $ tryMsgR (Rotate) (XMonad.Layout.MultiToggle.Toggle REFLECTX))
, ("M-S-r"                  , addName "Force Reflect (even on BSP)" $ sendMessage (XMonad.Layout.MultiToggle.Toggle REFLECTX))


-- If following is run on a floating window, the sequence first tiles it.
-- Not perfect, but works.
, ("M-f"                , addName "Fullscreen"                      $ sequence_ [ (withFocused $ windows . W.sink)
                                                                    , (sendMessage $ XMonad.Layout.MultiToggle.Toggle FULL) ])

-- Fake fullscreen fullscreens into the window rect. The expand/shrink
-- is a hack to make the full screen paint into the rect properly.
-- The tryMsgR handles the BSP vs standard resizing functions.
, ("M-S-f"                  , addName "Fake fullscreen"             $ sequence_ [ (P.sendKey P.noModMask xK_F11)
                                                                                , (tryMsgR (ExpandTowards L) (Shrink))
                                                                                , (tryMsgR (ExpandTowards R) (Expand)) ])
, ("C-S-h"                  , addName "Ctrl-h passthrough"          $ P.sendKey controlMask xK_h)
, ("C-S-j"                  , addName "Ctrl-j passthrough"          $ P.sendKey controlMask xK_j)
, ("C-S-k"                  , addName "Ctrl-k passthrough"          $ P.sendKey controlMask xK_k)
, ("C-S-l"                  , addName "Ctrl-l passthrough"          $ P.sendKey controlMask xK_l)
] ^++^

-----------------------------------------------------------------------
-- Reference
-----------------------------------------------------------------------
-- recent windows not working
-- , ("M4-<Tab>",              , addName "Cycle recent windows"        $ (cycleRecentWindows [xK_Super_L] xK_Tab xK_Tab))
-- either not using these much or (in case of two tab items below), they conflict with other bindings
-- so I'm just turning off this whole section for now. retaining for refernce after a couple months
-- of working with my bindings to see if I want them back. TODO REVIEW
--, ("M-s m"                  , addName "Swap master"                 $ windows W.shiftMaster)
--, ("M-s p"                  , addName "Swap next"                   $ windows W.swapUp)
--, ("M-s n"                  , addName "Swap prev"                   $ windows W.swapDown)
--, ("M-<Tab>"                , addName "Cycle up"                    $ windows W.swapUp)
--, ("M-S-<Tab>"              , addName "Cycle down"                  $ windows W.swapDown)

-- sublayout specific (unused)
-- , ("M4-C-S-m"               , addName "onGroup focusMaster"         $ onGroup focusMaster')
-- , ("M4-C-S-]"               , addName "toSubl IncMasterN 1"         $ toSubl $ IncMasterN 1)
-- , ("M4-C-S-["               , addName "toSubl IncMasterN -1"        $ toSubl $ IncMasterN (-1))
-- , ("M4-C-S-<Return>"        , addName "onGroup swapMaster"          $ onGroup swapMaster')


-----------------------------------------------------------------------
-- Resizing
-----------------------------------------------------------------------

subKeys "Resize"

[

-- following is a hacky hack hack
--
-- I want to be able to use the same resize bindings on both BinarySpacePartition and other
-- less sophisticated layouts. BSP handles resizing in four directions (amazing!) but other
-- layouts have less refined tastes and we're lucky if they just resize the master on a single
-- axis.
--
-- To this end, I am using X.A.MessageFeedback to test for success on using the BSP resizing
-- and, if it fails, defaulting to the standard (or the X.L.ResizableTile Mirror variants)
-- Expand and Shrink commands.
--
-- The "sequence_" wrapper is needed because for some reason the windows weren't resizing till
-- I moved to a different window or refreshed, so I added that here. Shrug.

-- mnemonic: less than / greater than
--, ("M4-<L>"       , addName "Expand (L on BSP)"     $ sequence_ [(tryMessage_ (ExpandTowards L) (Expand)), refresh])

--      ("C-<L>"                  , addName "Expand (L on BSP)"           $ tryMsgR (ExpandTowards L) (Shrink))
--    , ("C-<R>"                  , addName "Expand (R on BSP)"           $ tryMsgR (ExpandTowards R) (Expand))
--    , ("C-<U>"                  , addName "Expand (U on BSP)"           $ tryMsgR (ExpandTowards U) (MirrorShrink))
--    , ("C-<D>"                  , addName "Expand (D on BSP)"           $ tryMsgR (ExpandTowards D) (MirrorExpand))
--
--    , ("C-S-<L>"                , addName "Shrink (L on BSP)"           $ tryMsgR (ShrinkFrom R) (Shrink))
--    , ("C-S-<R>"                , addName "Shrink (R on BSP)"           $ tryMsgR (ShrinkFrom L) (Expand))
--    , ("C-S-<U>"                , addName "Shrink (U on BSP)"           $ tryMsgR (ShrinkFrom D) (MirrorShrink))
--    , ("C-S-<D>"                , addName "Shrink (D on BSP)"           $ tryMsgR (ShrinkFrom U) (MirrorExpand))

  ("M-["                    , addName "Expand (L on BSP)"           $ tryMsgR (ExpandTowards L) (Shrink))
, ("M-]"                    , addName "Expand (R on BSP)"           $ tryMsgR (ExpandTowards R) (Expand))
, ("M-S-["                  , addName "Expand (U on BSP)"           $ tryMsgR (ExpandTowards U) (MirrorShrink))
, ("M-S-]"                  , addName "Expand (D on BSP)"           $ tryMsgR (ExpandTowards D) (MirrorExpand))

, ("M-C-["                  , addName "Shrink (L on BSP)"           $ tryMsgR (ShrinkFrom R) (Shrink))
, ("M-C-]"                  , addName "Shrink (R on BSP)"           $ tryMsgR (ShrinkFrom L) (Expand))
, ("M-C-S-["                , addName "Shrink (U on BSP)"           $ tryMsgR (ShrinkFrom D) (MirrorShrink))
, ("M-C-S-]"                , addName "Shrink (D on BSP)"           $ tryMsgR (ShrinkFrom U) (MirrorExpand))

--, ("M-r"                    , addName "Mirror (BSP rotate)"         $ tryMsgR (Rotate) (XMonad.Layout.MultiToggle.Toggle MIRROR))
--, ("M-S-C-m"                , addName "Mirror (always)"             $ sendMessage $ XMonad.Layout.MultiToggle.Toggle MIRROR)
--, ("M4-r"                   , addName "BSP Rotate"                  $ sendMessage Rotate)

-- TODO: the following are potentially useful but I won't know till I work with BSP further
--    , ("M4-s"                   , addName "BSP Swap"                    $ sendMessage XMonad.Layout.BinarySpacePartition.Swap)
--    , ("M4-p"                   , addName "BSP Focus Parent"            $ sendMessage FocusParent)
--    , ("M4-n"                   , addName "BSP Select Node"             $ sendMessage SelectNode)
--, ("M4-m"                   , addName "BSP Move Node"               $ sendMessage MoveNode)

-- sublayout specific (unused)
--  ("M4-C-S-."               , addName "toSubl Shrink"               $ toSubl Shrink)
--, ("M4-C-S-,"               , addName "toSubl Expand"               $ toSubl Expand)
]
where
  toggleCopyToAll = wsContainingCopies >>= \ws -> case ws of
          [] -> windows copyToAll
          _ -> killAllOtherCopies

-----------------------------------------------------------------------
-- Screens
-----------------------------------------------------------------------
--    subKeys "Screens"
--    ([("M-C-<Right>", addName "Focus prev screen" prevScreen)
--    , ("M-C-<Left>" , addName "Focus next screen" nextScreen)
--    ]
--    ++ zipMod "Focus screen"                         screenKeys [0..] "M-"    (screenAction W.view)
--    ++ zipMod "Move client to screen"                screenKeys [0..] "M-S-"  (screenAction W.shift)
--    ++ zipMod "Swap workspace with screen"           screenKeys [0..] "M-M1-" (screenAction W.greedyView)
--    ++ zipMod "Swap workspace with and focus screen" screenKeys [0..] "M-C-"  (\s -> screenAction W.greedyView s >> screenAction W.view s)
--    ) ^++^

--    subKeys "Media Controls"
--    [
--    ("<XF86AudioMicMute>"      , addName "Mic Mute"                    $ spawn "notify-send mic mute")
--    ]


-- Mouse bindings: default actions bound to mouse events
-- Includes window snapping on move/resize using X.A.FloatSnap
-- Includes window w/h ratio constraint (square) using X.H.ConstrainedResize
myMouseBindings (XConfig {XMonad.modMask = myModMask}) = M.fromList $

[ ((myModMask,               button1) ,(\w -> focus w
  >> mouseMoveWindow w
  >> ifClick (snapMagicMove (Just 50) (Just 50) w)
  >> windows W.shiftMaster))

, ((myModMask .|. shiftMask, button1), (\w -> focus w
  >> mouseMoveWindow w
  >> ifClick (snapMagicResize [L,R,U,D] (Just 50) (Just 50) w)
  >> windows W.shiftMaster))

, ((myModMask,               button3), (\w -> focus w
  >> mouseResizeWindow w
  >> ifClick (snapMagicResize [R,D] (Just 50) (Just 50) w)
  >> windows W.shiftMaster))

, ((myModMask .|. shiftMask, button3), (\w -> focus w
  >> Sqr.mouseResizeWindow w True
  >> ifClick (snapMagicResize [R,D] (Just 50) (Just 50) w)
  >> windows W.shiftMaster ))

--    , ((mySecondaryModMask,      button4), (\w -> focus w
--      >> prevNonEmptyWS))
--
--    , ((mySecondaryModMask,      button5), (\w -> focus w
--      >> nextNonEmptyWS))

]
